package com.momentum.impl.modules.exploit.pingspoof;

import com.momentum.api.feature.Option;
import com.momentum.api.module.Module;
import com.momentum.api.module.ModuleCategory;
import com.momentum.api.util.time.Timer;
import net.minecraft.network.Packet;

import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

/**
 * @author linus
 * @since 02/26/2023
 */
@SuppressWarnings("rawtypes")
public class PingSpoofModule extends Module {

    // spoof options
    public final Option<Integer> delayOption =
            new Option<>("Delay", "Packet delay", 500, 2000, 5000);
    public final Option<Integer> jitterOption =
            new Option<>("Jitter", "Packet jitter delay", 0, 0, 25);
    public final Option<Boolean> reductionOption =
            new Option<>("Reduction", "Reduces latency", false);

    // listeners
    public final OutboundPacketListener outboundPacketListener =
            new OutboundPacketListener(this);
    public final TickListener tickListener =
            new TickListener(this);

    // packets
    protected final Timer delay =
            new Timer();
    protected final Queue<Packet> packets =
            new ConcurrentLinkedQueue<>();
    protected final Set<Short> ids =
            new HashSet<>();

    public PingSpoofModule() {
        super("PingSpoof", "Spoofs server latency", ModuleCategory.EXPLOITS);

        // options
        associate(
                delayOption,
                jitterOption,
                reductionOption,
                bind,
                drawn
        );

        // listeners
        associate(
                outboundPacketListener,
                tickListener
        );
    }

    @Override
    public void onDisable() {
        super.onDisable();

        // send our packets before disabling
        if (!packets.isEmpty()) {

            // we can now begin processing packets
            for (Packet packet : packets) {

                // make sure packet exists
                if (packet != null) {

                    // send all queued packets
                    mc.player.connection.sendPacket(packet);
                }
            }

            // clear packets list
            packets.clear();
        }
    }
}
