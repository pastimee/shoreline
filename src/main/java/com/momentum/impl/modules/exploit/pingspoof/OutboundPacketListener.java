package com.momentum.impl.modules.exploit.pingspoof;

import com.momentum.api.event.FeatureListener;
import com.momentum.asm.mixins.vanilla.accessors.ICPacketConfirmTransaction;
import com.momentum.asm.mixins.vanilla.accessors.ICPacketKeepAlive;
import com.momentum.impl.events.vanilla.network.OutboundPacketEvent;
import net.minecraft.network.play.client.CPacketClickWindow;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketKeepAlive;

/**
 * @author linus
 * @since 02/26/2023
 */
public class OutboundPacketListener extends FeatureListener<PingSpoofModule, OutboundPacketEvent> {

    /**
     * Default constructor
     *
     * @param feature The associated feature
     */
    protected OutboundPacketListener(PingSpoofModule feature) {
        super(feature);
    }

    @Override
    public void invoke(OutboundPacketEvent event) {

        // packet that tells the server to keep the connection alive
        if (event.getPacket() instanceof CPacketKeepAlive) {

            // packet from event
            CPacketKeepAlive packet = (CPacketKeepAlive) event.getPacket();

            // resend check
            if (!feature.packets.contains(packet)) {

                // attempt to reduce ping
                if (feature.reductionOption.getVal()) {

                    // modify packet data
                    ((ICPacketKeepAlive) packet).setKey(-1);
                }

                // cancel packet here, we will resend later
                feature.packets.offer(packet);
                event.setCanceled(true);
            }
        }

        // we can also cancel CPacketConfirmTransaction packets
        else if (event.getPacket() instanceof CPacketConfirmTransaction) {

            // packet from event
            CPacketConfirmTransaction packet = (CPacketConfirmTransaction) event.getPacket();

            // resend check
            if (!feature.packets.contains(packet)) {

                // protected id
                if (!feature.ids.remove(packet.getUid())) {

                    // attempt to reduce ping
                    if (feature.reductionOption.getVal()) {

                        // modify packet data
                        ((ICPacketConfirmTransaction) packet).setUid((short) -6);
                    }

                    // cancel packet here, we will resend later
                    feature.packets.offer(packet);
                    event.setCanceled(true);
                }
            }
        }

        // packet for clicking inventory windows
        else if (event.getPacket() instanceof CPacketClickWindow) {

            // packet from event
            CPacketClickWindow packet = (CPacketClickWindow) event.getPacket();

            // add to safe transaction ids
            feature.ids.add(packet.getActionNumber());
        }
    }
}
